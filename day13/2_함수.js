/*
    - 이벤트 : 행사 또는 사건
    - 이벤트(컴퓨터) : 프로그램에 의해 감지되고 처리 될 수 있는 동작이나 사건
    - 동작(컴퓨터) : 함수, 행위, 이벤트, 메소드
    - 함수 : 미리 코드들을 만들어두는 구조
        fonction 함수명 ( ) { }
        1. 함수의 종류
            - 내가 만든 함수
            - 이미 만들어져 있는 함수 : 개발자에게 빠른 개발이 가능하도록 도구 제공(라이브러리)
                - console.log( ), document.write( ), 배열명.push( ), 배열명.splice( )등등
                - 암기식이 아닌 개발할때 필요에 따라 찾아가면서 개발
        2. JS 데이터 타입
            1. Number(숫자), 문자열(String), 논리(Boolean) : 하나의 자료타입을 저장
            2. 배열(Array [ ]) : 여러 자료의 타입을 저장
            3. 함수(function) : 여러 코드들을 저장
        3. JS 함수 표현 방법
            1. 선언적 함수 : 선언 키워드를 이용하여 함수를 정의하는 방법 / function 함수명 ( ) { }
            2. 익명 함수 : 함수명이 없이 정의하는 방법 / let 변수명 = function ( ) { };
            3. 람다식(화살표) 함수 : 선언 키워드와 함수명 없이 화살표를 이용한 정의 방법 / let 변수명 = ( ) => { };
        4. 함수 만드는 방법
            - function : 함수를 만드는 키워드
            - 함수명 : 변수명과 동일하게 함수를 식별하는 용도 / 관례적으로 카멜표기법으로 작성
                       백엔드는 카멜표기법을 주로 사용, 프론트엔드는 스네이크표기법을 주로 사용
            - (매개변수1, 매개변수2, ...) : 함수가 실행될때 사용하기 위해 가져오는 데이터(값)
            - { } : 함수가 실행될때 처리해야할 코드(명령어)들의 구역
            - return : 함수가 처리한 값을 함수가 호출된 곳으로 데이터(값)을 보내는 역할(키워드)
        5. 함수를 호출하는 방법
            함수명(인자값1, 인자값2, ...); : 인자값이 각 매개변수에 대입되고 실행 후 함수의 return값을 반환한다.
        6. 함수를 만들어야 하는 이유 : 어떠한 코드를 다음에 재샤용 해야 한다면 만든다.
        7. 함수의 특징
            1. 코드를 재사용이 편리함
            2. 미리 정의된 코드에 인자값에 따른 서로 다른 결과물(리턴값)을 얻을 수 있다.
*/

let variable = 10;

// [1] 함수 만들기
function myFunction() {
    console.log("내가 처음 만든 함수 실행");
}

// [2] 함수 실행하기
myFunction();

// [3] 1차함수 컴퓨터의 함수로 구현
function function1(a, x, b) {   
    let y = (a*x) + b;
    return y;
}

// [4] 
let y1 = function1(1, 2, 3);
let y2 = function1(10, 20, 5);

// [5] 믹서기 함수 : 과일을 갈아서 만든 쥬스 믹서기
function mixer(fruit) {
    let result = fruit + "주스";
    return result;
}

// [6] 믹서기 실행
let cup1 = mixer("사과");
let cup2 = mixer("딸기");
console.log (cup1);
console.log (cup2);